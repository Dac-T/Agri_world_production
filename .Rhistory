plot(slr3W)
ks.test(residuals(slr3W), "pnorm")
slr3W = lm(Wheat ~ (pest), data = fullscnona[fullscnona$Cluster == 3, ])
par(mfrow = c(2,2))
plot(slr3W)
slr3W = lm(log(Wheat) ~ log(pest), data = fullscnona[fullscnona$Cluster == 3, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr3W)
slr3W = lm((Wheat) ~ log(pest), data = fullscnona[fullscnona$Cluster == 3, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr3W)
ks.test(residuals(slr3W), "pnorm")
summary(slr3W)
slr4M = lm((Maize) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4M)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4M), "pnorm")
summary(slr4M)
slr4M = lm((Maize) ~ (pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4M)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4M), "pnorm")
summary(slr4M)
slr4M = lm(log(Maize) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4M)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4M), "pnorm")
summary(slr4M)
slr4M = lm((Maize) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4M)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4M), "pnorm")
summary(slr4M)
## Simple Linear Regression for Cluster 4, Wheat
slr4W = lm((Wheat) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm((Wheat) ~ (pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm(log(Wheat) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm((Wheat) ~ sqrt(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm((Wheat) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
slr4W = lm((Wheat) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm((Potatoes) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm(log(Potatoes) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
View(fullscnona)
slr4W = lm(log(Rize..paddy) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
slr4W = lm(log(Rice..paddy) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
slr4W = lm((Rice..paddy) ~ log(pest), data = fullscnona[fullscnona$Cluster == 4, ])
# diagnostic graphs
par(mfrow = c(2,2))
plot(slr4W)
#Kolmogorov-Smirnov test
ks.test(residuals(slr4W), "pnorm")
summary(slr4W)
crop_variables <- c("Maize", "Wheat", "Rice..paddy", "Sorghum", "Potatoes")
cluster_numbers <- 1:6
best_models <- list()
worst_models <- list()
for (crop in crop_variables) {
best_models[[crop]] <- list(models = list(), r_squared = numeric(0))
worst_models[[crop]] <- list(models = list(), r_squared = numeric(0))
for (N in cluster_numbers) {
regmod <- lm(paste(crop, "~ log(pest)"), data = fullscnona[fullscnona$Cluster == N, ])
# Kolmogorov-Smirnov test
ks_stat <- ks.test(residuals(regmod), "pnorm")$statistic
# Summary information
summary_info <- summary(regmod)
# Store models with the best and worst Multiple R-squared
if (length(best_models[[crop]]$models) < 2 || summary_info$r.squared > min(best_models[[crop]]$r_squared)) {
best_models[[crop]]$models <- c(best_models[[crop]]$models, list(list(N = N, model = regmod, summary = summary_info)))
best_models[[crop]]$r_squared <- c(best_models[[crop]]$r_squared, summary_info$r.squared)
}
if (length(worst_models[[crop]]$models) < 2 || summary_info$r.squared < max(worst_models[[crop]]$r_squared)) {
worst_models[[crop]]$models <- c(worst_models[[crop]]$models, list(list(N = N, model = regmod, summary = summary_info)))
worst_models[[crop]]$r_squared <- c(worst_models[[crop]]$r_squared, summary_info$r.squared)
}
}
}
# Print the best and worst models for each crop
for (crop in crop_variables) {
cat("Crop:", crop, "\n")
cat("Best Models (Max R-squared):\n")
print(best_models[[crop]]$models)
cat("Worst Models (Min R-squared or p-value > 0.05 in KS test):\n")
print(worst_models[[crop]]$models)
}
View(slr4W)
View(best_models)
best_models[[Maize]]$models
for (crop in crop_variables) {
cat("Crop:", crop, "\n")
cat("Best Models (Max R-squared):\n")
print(best_models[[crop]]$models)
cat("Worst Models (Min R-squared or p-value > 0.05 in KS test):\n")
print(worst_models[[crop]]$models)
}
best_models[[Wheat]]$models
best_models[["Wheat"]]$models
best_models[["Wheat"]]$models[3]
worst_models[["Wheat"]]$models[6]
worst_models[["Wheat"]]$models
plot(models[["Maize"]]$models[6])
models[["Maize"]]$models[6]
models[["Maize"]]$models
crop_variables = c("Maize", "Wheat", "Rice..paddy", "Sorghum", "Potatoes")
cluster_numbers = 1:6
models <- list()
for (crop in crop_variables) {
models[[crop]] <- list(models = list(), r_squared = numeric(0))
for (N in cluster_numbers) {
regmod = lm(paste(crop, "~ log(pest)"), data = fullscnona[fullscnona$Cluster == N, ])
# Kolmogorov-Smirnov test
ks_stat = ks.test(residuals(regmod), "pnorm")$statistic
# Summary information
summary_info = summary(regmod)
# Store models with the best and worst Multiple R-squared
models[[crop]]$models = c(best_models[[crop]]$models, list(list(N = N, ks = ks_stat, model = regmod, summary = summary_info)))
models[[crop]]$r_squared = c(best_models[[crop]]$r_squared, summary_info$r.squared)
}
}
View(models)
rm('best_models')
rm('worst_models')
models[["Maize"]]$models[[5]
models[["Maize"]]$models
View(models)
models[["Maize"]]
models[["Maize"]]$models[[1]]$1
models[["Maize"]]$models[[1]]$N
models[["Maize"]]$models[[1]]$model
models <- list()
for (crop in c("Maize", "Wheat", "Rice..paddy", "Sorghum", "Potatoes")) {
models[[crop]] <- list(models = list(), r_squared = numeric(0))
for (N in 1:6) {
regmod = lm(paste(crop, "~ log(pest)"), data = fullscnona[fullscnona$Cluster == N, ])
# Kolmogorov-Smirnov test
ks_stat = ks.test(residuals(regmod), "pnorm")$statistic
# Summary information
summary_info = summary(regmod)
# Store models with the best and worst Multiple R-squared
models[[crop]]$models = c(best_models[[crop]]$models, list(list(N = N, ks = ks_stat, model = regmod, summary = summary_info)))
}
}
par(mfrow = c(2,2))
plot(models[["Maize"]]$models[[4]]$model)
models <- list()
for (crop in c("Maize", "Wheat", "Rice..paddy", "Sorghum", "Potatoes")) {
models[[crop]] <- list(models = list(), r_squared = numeric(0))
for (N in 1:6) {
regmod = lm(paste(crop, "~ log(pest)"), data = fullscnona[fullscnona$Cluster == N, ])
# Kolmogorov-Smirnov test
ks_stat = ks.test(residuals(regmod), "pnorm")$statistic
# Summary information
summary_info = summary(regmod)
# Store models with the best and worst Multiple R-squared
models[[crop]]$models = c(models[[crop]]$models, list(list(N = N, ks = ks_stat, model = regmod, summary = summary_info)))
}
}
par(mfrow = c(2,2))
plot(models[["Maize"]]$models[[4]]$model)
plot(models[["Potatoes"]]$models[[6]]$model)
models[["Maize"]]$models[[1]]$summary$r.squared
models[["Maize"]]$models[[1]]$summary$p-value
models[["Maize"]]$models[[1]]$summary$p_value
models[["Maize"]]$models[[1]]$summary
plot(models[["Maize"]]$models[[1]]$model)
all_r_squared <- numeric(0)
significant_pairs <- list()
for (crop in crop_variables) {
r_squared_values <- sapply(models[[crop]]$models, function(m) m$summary$r.squared)
all_r_squared <- c(all_r_squared, r_squared_values)
# Store the significant pairs (R-squared < 0.25)
significant_pairs[[crop]] <- which(r_squared_values < 0.25)
}
# Find the indices of the 5 biggest R-squared values
top_5_indices <- order(all_r_squared, decreasing = TRUE)[1:5]
# Extract the corresponding pairs (X, N)
top_5_pairs <- numeric(0)
for (i in top_5_indices) {
crop_index <- findInterval(i, cumsum(sapply(crop_variables, function(crop) length(models[[crop]]$models))))
crop <- crop_variables[crop_index]
N <- i - sum(sapply(models[crop_variables[1:(crop_index - 1)]]$models, length))
top_5_pairs <- c(top_5_pairs, paste(crop, N, sep = "_"))
}
crop_variables = c("Maize", "Wheat", "Rice..paddy", "Sorghum", "Potatoes")
Extract R-squared values and corresponding pairs
# Extract R-squared values and corresponding pairs
all_r_squared <- numeric(0)
significant_pairs <- list()
for (crop in crop_variables) {
r_squared_values <- sapply(models[[crop]]$models, function(m) m$summary$r.squared)
all_r_squared <- c(all_r_squared, r_squared_values)
# Store the significant pairs (R-squared < 0.25)
significant_pairs[[crop]] <- which(r_squared_values < 0.25)
}
# Find the indices of the 5 biggest R-squared values
top_5_indices <- order(all_r_squared, decreasing = TRUE)[1:5]
# Extract the corresponding pairs (X, N)
top_5_pairs <- numeric(0)
for (i in top_5_indices) {
crop_index <- findInterval(i, cumsum(sapply(crop_variables, function(crop) length(models[[crop]]$models))))
crop <- crop_variables[crop_index]
N <- i - sum(sapply(models[crop_variables[1:(crop_index - 1)]]$models, length))
top_5_pairs <- c(top_5_pairs, paste(crop, N, sep = "_"))
}
top_5_indices
# Combine all models and their R-squared values into a data frame
all_models <- do.call(rbind, lapply(models, function(crop_model) data.frame(crop = rep(names(models), each = length(crop_model$r_squared)),
N = unlist(lapply(crop_model$models, function(model) model$N)),
r_squared = unlist(crop_model$r_squared))))
# Combine all models and their R-squared values into a data frame
all_models <- do.call(rbind, lapply(models, function(crop_model) data.frame(crop = rep(names(models), each = length(crop_model$r_squared)),
N = unlist(lapply(crop_model$models, function(model) model$N)),
r_squared = unlist(crop_model$r_squared))))
# Create an empty data frame to store results
result_model_df <- data.frame(crop = character(), N = numeric(), r_squared = numeric())
# Print results
print("Top 5 models:")
print(top_5_models)
# Create an empty data frame to store results
result_model_df <- data.frame(crop = character(), N = numeric(), r_squared = numeric())
# Loop through crop variables and clusters
for (crop in crop_variables) {
for (N in 1:6) {
# Extract R-squared value
r_squared_value <- models[[crop]]$models[[N]]$summary$r.squared
# Append the result to the data frame
result_model_df <- rbind(result_model_df, data.frame(crop = crop, N = N, r_squared = r_squared_value))
}
}
View(result_model_df)
# Find the top 5 R-squared values
top_5_models <- result_model_df[order(-result_model_df$r_squared), ][1:5, ]
# Count the number of pairs with R-squared < 0.25
count_low_r_squared <- sum(result_model_df$r_squared < 0.25)
print("Top 5 models:")
print(top_5_models)
print(paste("Number of pairs with R-squared < 0.25:", count_low_r_squared))
print(paste("Number of pairs with R-squared < 0.25:", count_low_r_squared, "over", length(result_model_df)))
print(paste("Number of pairs with R-squared < 0.25:", count_low_r_squared, "over", nb.rows(result_model_df)))
print(paste("Number of pairs with R-squared < 0.25:", count_low_r_squared, "over", nrow(result_model_df)))
models[["Maize"]]$models[[5]]$summary
models[["Maize"]]$models[[5]]$summary$p-value
models[["Maize"]]$models[[5]]$summary$p.value
models[["Maize"]]$models[[5]]$summary$p_value
models[["Maize"]]$models[[5]]$summary$fstatistic[1, "Pr(>F)"]
models[["Maize"]]$models[[5]]$summary$fstatistic
models[["Maize"]]$models[[5]]$summary$coefficients
anova(models[["Maize"]]$models[[5]]$model)$'Pr(>F)'
install.packages('broom')
install.packages("broom")
install.packages("broom")
install.packages("broom")
install.packages("broom")
library(broom)
glance(models[["Maize"]]$models[[5]]$model)
glance(models[["Maize"]]$models[[5]]$model)$p.value
glance(models[["Maize"]]$models[[5]]$model)$p.value[1]
glance(models[["Maize"]]$models[[5]]$model)$p.value[2]
glance(models[["Maize"]]$models[[5]]$model)$p.value[[1]]
# Create an empty data frame to store results
result_model_df <- data.frame(crop = character(), N = numeric(), r_squared = numeric(), p_value = numeric())
# Loop through crop variables and clusters
for (crop in crop_variables) {
for (N in 1:6) {
# Extract R-squared value
r_squared_value = models[[crop]]$models[[N]]$summary$r.squared
p_val = glance(models[[crop]]$models[[N]]$model)$p.value[[1]]
# Append the result to the data frame
result_model_df = rbind(result_model_df, data.frame(crop = crop, N = N,
r_squared = r_squared_value,
p_value = p_val))
}
}
# Find the top 5 R-squared values
top_5_models = result_model_df[order(-result_model_df$r_squared), ][1:5, ]
# Count the number of pairs with R-squared < 0.25
count_low_r_squared = sum(result_model_df$r_squared < 0.25)
View(result_model_df)
# Create an empty data frame to store results
result_model_df <- data.frame(crop = character(), N = numeric(), r_squared = numeric(), p_value = numeric())
# Loop through crop variables and clusters
for (crop in crop_variables) {
for (N in 1:6) {
# Extract R-squared value
r_squared_value = models[[crop]]$models[[N]]$summary$r.squared
p_val = glance(models[[crop]]$models[[N]]$model)$p.value[[1]]
# Append the result to the data frame
result_model_df = rbind(result_model_df, data.frame(crop = crop, N = N,
r_squared = r_squared_value,
p_value = p_val))
}
}
# Find the top 5 R-squared values
top_5_models = result_model_df[result_model_df$p_value < 0.05, ][order(-result_model_df$r_squared), ][1:5, ]
# Count the number of pairs with R-squared < 0.25
count_low_r_squared_or_high_p_value <- sum(result_model_df$r_squared < 0.25 | result_model_df$p_value > 0.05)
# Print results
print("Top 5 models:")
print(top_5_models)
print(paste("Number of pairs with R-squared < 0.25 or p-value > 0.05::", count_low_r_squared_or_high_p_value, "over", nrow(result_model_df)))
# Find the top 5 R-squared values
top_5_models = result_model_df[result_model_df$p_value < 0.05, ][order(-result_model_df$r_squared), ][1:5, ]
print(top_5_models)
top_5_models <- result_model_df[result_model_df$p_value < 0.05, ]
top_5_models <- top_5_models[order(-top_5_models$r_squared), ][1:5, ]
top_5_models
library(ggplot2)
library(tidyverse)
library(cowplot)
library(gridExtra)
library(FactoMineR) #for PCA
library(factoextra)
library(GGally)
library(cluster)
library(MASS)
library(broom)
### 1. Data importation
data = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/Yield.csv",
header = TRUE,
sep = "",
dec = ".",
na.strings = c("NA", ""))
by_country = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/Yieldbycountry.csv",
header = TRUE,
sep = "",
dec = ".",
na.strings = c("NA", ""))
# Add more accurate data about the rainfall, even though they are also incomplete
real_rain = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/real_rain.csv",
header = TRUE,
skip = 3,
sep = ",",
dec = ".",
na.strings = c("NA", ""))
year_vector <- character()
year_vector = sprintf("X%d", 1990:2013)
real_rain = real_rain[, c("Country.Name", year_vector)]
names(real_rain) = c("Area", sprintf("X%d", 1990:2013))
unique_areas = unique(data$Area)
real_rain = real_rain[real_rain$Area %in% unique_areas, ]
# Reshape the dataframe using pivot_longer
real_rain <- real_rain %>%
pivot_longer(cols = starts_with("X"),
names_to = "Year",
values_to = "r_rain",
values_drop_na = TRUE)
real_rain$Year = sub("X", "", real_rain$Year)
names(by_country)[names(by_country) == "average_rain_fall_mm_per_year"] = "rain"
names(by_country)[names(by_country) == "pesticides_tonnes"] = "pest"
by_country = merge(by_country, real_rain, by = c("Area", "Year"), all.x = TRUE)
by_country = by_country %>%
mutate(rain = ifelse(is.na(r_rain), rain, ifelse(rain != r_rain, r_rain, rain))) %>%
select(-r_rain)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(gridExtra)
library(FactoMineR) #for PCA
library(factoextra)
library(GGally)
library(cluster)
library(MASS)
library(broom)
### 1. Data importation
data = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/Yield.csv",
header = TRUE,
sep = "",
dec = ".",
na.strings = c("NA", ""))
by_country = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/Yieldbycountry.csv",
header = TRUE,
sep = "",
dec = ".",
na.strings = c("NA", ""))
# Add more accurate data about the rainfall, even though they are also incomplete
real_rain = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/real_rain.csv",
header = TRUE,
skip = 3,
sep = ",",
dec = ".",
na.strings = c("NA", ""))
year_vector <- character()
year_vector = sprintf("X%d", 1990:2013)
real_rain = real_rain[, c("Country.Name", year_vector)]
names(real_rain) = c("Area", sprintf("X%d", 1990:2013))
unique_areas = unique(data$Area)
real_rain = real_rain[real_rain$Area %in% unique_areas, ]
# Reshape the dataframe using pivot_longer
real_rain <- real_rain %>%
pivot_longer(cols = starts_with("X"),
names_to = "Year",
values_to = "r_rain",
values_drop_na = TRUE)
real_rain$Year = sub("X", "", real_rain$Year)
names(by_country)[names(by_country) == "average_rain_fall_mm_per_year"] = "rain"
names(by_country)[names(by_country) == "pesticides_tonnes"] = "pest"
by_country = merge(by_country, real_rain, by = c("Area", "Year"), all.x = TRUE)
by_country = by_country %>%
mutate(rain = ifelse(is.na(r_rain), rain, ifelse(rain != r_rain, r_rain, rain))) %>%
select(-r_rain)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(gridExtra)
library(FactoMineR) #for PCA
library(factoextra)
library(GGally)
library(cluster)
library(MASS)
library(broom)
### 1. Data importation
data = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/Yield.csv",
header = TRUE,
sep = "",
dec = ".",
na.strings = c("NA", ""))
by_country = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/Yieldbycountry.csv",
header = TRUE,
sep = "",
dec = ".",
na.strings = c("NA", ""))
# Add more accurate data about the rainfall, even though they are also incomplete
real_rain = read.table("/Users/orlando/Desktop/DENS/Double_diplôme/Cours_S1/S1_D3/stats/projet_stats/real_rain.csv",
header = TRUE,
skip = 3,
sep = ",",
dec = ".",
na.strings = c("NA", ""))
year_vector <- character()
year_vector = sprintf("X%d", 1990:2013)
real_rain = real_rain[, c("Country.Name", year_vector)]
names(real_rain) = c("Area", sprintf("X%d", 1990:2013))
unique_areas = unique(data$Area)
real_rain = real_rain[real_rain$Area %in% unique_areas, ]
# Reshape the dataframe using pivot_longer
real_rain <- real_rain %>%
pivot_longer(cols = starts_with("X"),
names_to = "Year",
values_to = "r_rain",
values_drop_na = TRUE)
real_rain$Year = sub("X", "", real_rain$Year)
names(by_country)[names(by_country) == "average_rain_fall_mm_per_year"] = "rain"
names(by_country)[names(by_country) == "pesticides_tonnes"] = "pest"
by_country = merge(by_country, real_rain, by = c("Area", "Year"), all.x = TRUE)
by_country = by_country %>%
mutate(rain = ifelse(is.na(r_rain), rain, ifelse(rain != r_rain, r_rain, rain))) %>%
select(-r_rain)
library(tidyverse)
by_country = by_country %>%
mutate(rain = ifelse(is.na(r_rain), rain, ifelse(rain != r_rain, r_rain, rain))) %>%
select(-r_rain)
by_country = by_country %>%
mutate(rain = ifelse(is.na(r_rain), rain, ifelse(rain != r_rain, r_rain, rain))) %>%
select(-r_rain)
by_country = merge(by_country, real_rain, by = c("Area", "Year"), all.x = TRUE)
